today we're going to learn about variables.

variables are the next basic part of programs that we'll need to learn

variables, just like in math, store values in a program.

in every computer, there's a place called the memory, or RAM. 

*when you store things in a program, they're stored in your computer's memory
and they'll stay there until your program comes to a stop or your computer turns off

*there are three main things you can do with variables: define, assign, and recall

*there are also a few different types of variables you use for different purposes

lets start with numbers. 

*you define a variable by first typing the name you want to give it

by convention, variables are named after what they hold, are written in lowercase,
and use underscores instead of spaces. in general, don't use numbers or 
special characters either.

after typing the name, put an equals sign after it, and then the value you want to store.

my_age = 16

you won't see anything, but if we run this program, that value will be stored in memory. cool! 

so how do we get that value? just substitute where you would place that value in your program with the variable name.
let's try it with a print. 

my_age = 16
print(age)

as you can see, the variable was stored, and then recalled from memory.

down the line, you might want to change the value of a certain variable,
and that looks exactly like defining one.

my_age = 16
print("i am", my_age, "years old")
my_age = 18
print("after two years, i am", my_age, "years old")

the third line changed the value of my_age, and you can see that here.

but why do we want to use variables in the first place? well they can be used 
to make one specific program work with lots of different types of data. let's look at an example

my_age = 16
my_age = my_age + 10
print("i will be", my_age, "after 10 years")
my_age = my_age + 20
print("i will be", my_age, "after 30 years")

*we haven't learned about operations yet, but you can probably guess what this does.
it takes the stored value, adds a number to it, and then stores that back in the memory.
as a result, the starting number is increased by 10. if i change 16 to 30 and run the 
program again,the entire output changes, and i only had to change one value.

awesome. so now we know how to define, assign, and recall variables. 
***let's learn about the different types.

//int
my_age = 16

there are two main number types in python.
this is an integer value, which means it stores positive and negative whole numbers. 
this type is called
'int'

//float
pi = 3.14

this is a floating point value, which stores decimal points. this type is called 'float'

//str
my_name = "code dog!!!!"
my_name = 'code doggo'

'str' stands for string. it holds letters, numbers, and characters. you can write strings with single
or double quotes.

//bool
is_cool = True
is_lame = False

'bool' is for boolean. it holds a truth value, so either true or false. type those with 
capital first letters. we'll learn how to properly use booleans later on.

//complex
imaginary_number = 5+12j

there's also this special type that holds complex numbers, but we won't use this in the intro
to coding course

those are all of the types built into python. 
*the different types use different amounts of memory on your computer.
we'll learn about the different ways
you can manipulate those types and why you would want to use them in the next video,
but before you go, let's learn about the input command

input lets you type something into your program, so
you don't have to change the program every time you run it.

input()

this command will return whatever the user types in.
when i run this program, it'll wait for me to type something in,
and when i hit enter, the program comes to a stop.

you can give the input command a prompt to ask the user of your program.
here's a basic example.

name = input('what is your name?')

print("hello there,", name, "!")

this program created a variable called 'name', waited for me to type
something in, and then stored it inside of that variable.
it then added that variable to make a bigger string, and printed it out.
awesome. 



----------the type command.

in almost all programming languages, types can cause errors if they are used incorrectly,
like this.

print(True + "hello")

the type command will tell you what type a variable is, and we can use this later on
so our programs don't crash. 

type(pi)

put the value you want to check inside of the parenthesis.
to see what the type command tells us, we need to print it. you can just sandwich
it into a print command, like this.

print( type(pi) )

you can see it prints class float, which tells us it's a floating point number.

you can also combine the type command with the keyword 'is' like this

print( type(pi) is float )
print( type(pi) is str)

can you guess what these two lines will print?
it says True and then False, so it IS of type float but NOT of type string.
if that's a little confusing, that's fine for now. just play around with it 
on your own and see what happens.

alright, that's all for this video. soon enough, we'll be making cool programs
that actually do things, so just stick through the first few boring parts, and i 
promise, coding can get pretty fun.

see ya. code dog out.