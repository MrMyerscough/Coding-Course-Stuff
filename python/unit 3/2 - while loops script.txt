in this video, we'll learn about while loops. 

loops in programming are really useful because they can be 
used to save time and achieve things that were before impossible.

remember, we started out writing programs made of simple commands. 
they would start at the first command, run through them one by one,
and be finished when they ran out. 

print('hello there!')
user_number = input('pick a number')
x = int(user_number)
x *= 2
print(user_number, 'x 2 =', x)

then we introduced conditionals, and our programs could have different
outputs and courses of actions depending on conditions. 

name = input("what is your name? ")

if name == "dog":
    print("hi there dog!")
elif name == "bryan":
    print("hello bry!")
elif name == "josie":
    print("yo josie!")
else:
    print("who are you?")
    print("have we met before?")

print("what's up?")

now, with loops, we can make our programs repeat a set of instructions. 

there are two types of loops in python: the while loop, and the for loop.
today we're learning about the basic while loop, and in the next video,
we'll take a look at for loops.

to write a while loop, first write the keyword 'while', and then follow that
with a condition. for demonstration, I'll just put the value 'True' here,
as a place holder. follow your condition with a colon, just like with if
statements. many times, the colon means start a block of code, so that's 
what we'll do. 

again, the code that will repeat must be in a block, so 
python knows what is part of the while loop, and what is 
the rest of the program. a block is written with an indent. 
I'll place a simple print here to show every time the block is repeated. 

so like i said, a loop simply repeats a set of instructions. 

but how many times does the loop repeat?
and when does a while loop stop? 

while loops will run as long as the condition they use evaluates to true.
know that it checks the condition //before// each time the block runs.


in this program, the condition is /always/ true, which means the loop
will repeat forever. let's give this a try. 

as you can see, we have many many 'hi's printing out very very quickly.
I'll stop this with a keyboard interrupt, or you can also trash the terminal
window with the trash icon. 

[on Mac, control+D, windows CTRL + C]
on Mac, control+D stops a program and on Windows, that's CTRL+C

that was a loop that never ever stops, which is called an infinite loop. 
obviously, we want to avoid those, so to do this, 
~~~the code inside of the repeating block must affect the condition.~~~

here's an example. 

count = 0

while count < 10:
    print(count)
    count += 1

print('done!')

i declare a variable before the while loop called 'count' and set it to zero. 
my condition for the while loop is 'count is less than 10', and inside of the
block, i print the variable, and add one to it. 

let's look at the output. it prints 0 then 1 then 2 and so on all the way to 9.
notice how the program DID come to a stop, and that's because the condition
and the block are dependent. 

let's run through this program.

first, the variable count is set to zero.
before the while loop runs, it checks if the condition is true. since 0 is less 
than 10, the block will run. the variable is printed, and then increased by one.
then python checks the condition again to see if it has changed. now count is 
equal to 1. 1 is still less than 10, so the block repeats a second time. 1 is
printed out, then it becomes 2. it checks if 2 is less than 10, and then runs
again. this continues for a while.

when count is increased from 9 to 10, however, the condition becomes false, and
the block stops repeating. it finishes the last command of the program, which
is a print, and then it comes to a stop.

so with most of the while loops you write, you should have the condition depend on the
code inside of the block, to ensure that no infinite loops happen. 

most of the time, that requires you write a variable before the while loop, 
and then change it inside of your code block.

//
however, there is a way to stop a loop without making the condition false. 
it's called the break statement.

in essence, the break statement means 'stop the loop. now.'
so you technically can make a loop that stops without a 
condition depending on your code block. 

for now, stay away from the break statement, since it can lead to bad practices. 

count = 0
while True:
    print(count)
    count += 1
    if count == 10:
        break

there's also a continue statement you can use with loops. that means 'stop this loop, 
but continue with the next one'. you should also avoid this command when starting out,
but you can look it up if you're curious. 
//



now that you have an idea of how while loops work, let's look at a few examples 
of how to use them. 

this program is just like the first, except it counts backwards, instead of forwards.

count = 10

while count > 0:
    print(count)
    count -= 1

print('done!')

the count variable starts at 10 instead of zero, decreases instead of increases, 
and the loop will run as long as count is bigger than zero. 

[run]

we can also change the rate at which the count variable changes. 
instead of subtracting one from count, i can subtract by two or three or five.
now the program counts down from ten by twos. 

[run]

if i wanted to print out that last number, i can change the condition to 'greater than 
or equal to'. 

[run]

just like with if-statements, you can also nest loops. 
here i have two counting loops. the main loop uses the variable
'outer count', and the inside loop uses the variable 'inner count'.

so what happens when you put repeating code inside of repeating code?
well, you get more repeating. in this specific program, the inner loop
will count from zero to two every time the outer loop runs. 

outer_count = 0

while outer_count < 5:

    inner_count = 0

    while inner_count < 3:
        print(outer_count, inner_count)
        inner_count += 1
    
    outer_count += 1

[run]

when i print these, this is the output we end up with. as you can see, the 
first set of numbers range from zero to four, and for each number, there's 
a zero one and two to pair with it. 
okay, that's neat and all, but why would you ever want to loop code inside
of looping code? 

the main idea is that you can use loops to quickly solve problems with patterns. 
in real life, for example, if you had to alphabetize a set of books, first 
you might arrange all of them by the first letter. then you might go back 
and arrange all of the same letter books by their second letter. 
the outer loop would be the sorting by the first letter, and the inner loop 
would be sorting by the second letter.

*** graphics hehe ***

i can modify this program to show us some times tables. 

outer_count = 1

while outer_count <= 10:

    inner_count = 1

    while inner_count <= 10:
        print(f'{outer_count} x {inner_count} = {outer_count * inner_count}')
        inner_count += 1
    
    outer_count += 1

[run]

this program is pretty simple. instead of the condition depending on a number,
it depends on user input to come to a stop.

user_choice = ''

while user_choice != 'yes':
    user_choice = input('do you want to stop yet? ')

print('okay.')

instead of a count variable, we have one called 'user choice'
and inside of the block we see that it's set to whatever the 
user types in.

the condition checks if the user choice is not 'yes'. in other words, the 
program won't stop until the user says yes. let's test this. 

[no, no, no, no, ahhhh, yes]


this program uses a loop to print out items in a list.
here, we have a list and a counting variable starting at zero.

for the loop, we keep repeating /while/ count is less than the length of the list.

we also increase count by one each time, which makes this really a counting loop 
underneath. 

since the list is 5 items long, the condition is really "while count is less than five"
meaning it'll count from zero to four. 

we then use that number to get a specific item in the list, using a bracket selector.
obviously, the first item that will print out will be james, since it's at the zero
position in the list. then john, at position 1. 

let's see what the output looks like.


names = ['james', 'john', 'jack', 'jerry', 'julian']
count = 0

while count < len(names):
    print(names[count])
    count += 1

this is an example of why lists are indexed from zero. that way, we could
start counting at zero, and finish when the count is equal to the length.

now, before you write a million programs going through lists like shown here,
this is actually a peek at what for loops do. we'll learn more about 
looping through lists in the next video, but for now, we can still 
do the same exact thing using while loops. 


here's the structure of a program with a repeating menu. 
just like a regular menu program, it prints the options to the 
user, takes input, and then uses an if statement to run the 
corresponding code. however, the difference here is that this
menu will repeat unit the user decides they want to quit. 
this variable called done is initially set to False. the
loop will run /while/ the user is /not done/. 
you didn't forget right? not means 'flip the boolean' so true 
becomes false, and false becomes true. 
choosing option
four changes the value of this variable, which makes the condition
evaluate to false, and causes the loop 
to come to a stop. let's test it out. 

done = False
print('pick an option')

while not Done:
    print('1 - option one')
    print('2 - option two')
    print('3 - option three')
    print('4 - quit')

    choice = input()

    if choice == '1':
        print('you chose option one!')
    elif choice == '2':
        print('you chose option two!')
    elif choice == '3':
        print('you chose option three!')
    elif choice == '4':
        done = True 
    else:
        print('not a menu option!')


taking that idea, i've wrapped it up into a program with a real purpose.
this program will let the user practice some math problems, and they get
to choose which type of problem to solve. once the user is done with the
problem, they can choose the option to quit. i've generated each math
problem randomly, using the random module. it then takes the user's 
entered number, checks if its correct, and then prints their result.

here's the program in action. 


# import, initialize variable, and print
import random
done = False 
print('welcome to math practice! pick an option.')

# menu loop
while not Done:
    # print options
    print('1 - practice addition')
    print('2 - practice subtraction')
    print('3 - practice multiplication')
    print('4 - practice division')
    print('5 - quit')

    # take input
    choice = input()

    # addition problems
    if choice == '1':
        one = random.randint(1, 100)
        two = random.randint(1,100)
        answer = int(input(f'what is {one} + {two}? '))
        if answer == one + two:
            print('correct!')
        else:
            print(f'incorrect! the correct answer was {one + two}.')
    # subtraction problems
    elif choice == '2':
        one = random.randint(1, 100)
        two = random.randint(1,100)
        answer = int(input(f'what is {one} - {two}? '))
        if answer == one - two:
            print('correct!')
        else:
            print(f'incorrect! the correct answer was {one - two}.')
    # multiplication problems
    elif choice == '3':
        one = random.randint(1, 12)
        two = random.randint(1, 12)
        answer = int(input(f'what is {one} x {two}? '))
        if answer == one * two:
            print('correct!')
        else:
            print(f'incorrect! the correct answer is {one * two}.')
    # division problems
    elif choice == '4':
        one = random.randint(1, 12)
        two = random.randint(1, 12)
        product = one * two
        answer = int(input(f'what is {product} ÷ {one}? '))
        if answer == two:
            print('correct!')
        else:
            print(f'incorrect! the correct answer is {two}.')
    # quit
    elif choice == '5':
        done = True
    else: 
        print('not a valid menu option!')

notice how the program was designed to make sense. 'while not done' is
pretty self-explanatory: run while the user isn't done. and to stop
the program, simply set done equal to true. if you're ever having
trouble making sense of your own programs, try to spell things out 
easier. 

loops are a big concept to learn, so take your time and make sure 
you understand everything. 

that's all for now, code dog out. 